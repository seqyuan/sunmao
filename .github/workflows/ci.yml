# This workflow will upload a Python Package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

name: Upload Package

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0
  release:
    types: [published]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref_type == 'branch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Install dependencies
      run: poetry install --no-root
    
    - name: Run tests (optional)
      run: poetry run pytest tests/ -v || echo "Tests failed but continuing..."
      continue-on-error: true
    
    - name: Run linting (optional)
      run: |
        poetry run black sunmao/ || echo "Black formatting failed but continuing..."
        poetry run mypy sunmao/ || echo "MyPy type checking failed but continuing..."
      continue-on-error: true

  release-build:
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v'))

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --no-root

      - name: Clean previous builds
        run: rm -rf dist/*

      - name: Build package
        run: poetry build

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  pypi-publish:
    runs-on: ubuntu-latest
    needs:
      - release-build
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write

    environment:
      name: pypi

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          # Fallback to API token if trusted publishing fails
          username: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
